// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using FractalViewMac.Model.Common.Classes;
using FractalViewMac.Model.Common.Enums;
using FractalViewMac.Model.Fractals;
using FractalViewMac.Model;
using SkiaSharp;
using SkiaSharp.Views.Mac;
using System.Diagnostics;
using System.IO;

namespace FractalView
{
	public partial class CreateImageViewController : NSViewController
	{
        int width, height, iterCount;
        SKBitmap bmp;

        public CreateImageViewController (IntPtr handle) : base (handle)
		{
		}

        void SaveImageButton_Activated(object sender, EventArgs e)
        {
            var dlg = new NSSavePanel
            {
                Title = "Сохранить изображение"

            };

            dlg.BeginSheet(View.Window, (result) =>
            {
                if (result == 1)
                {
                    var path = dlg.Url.Path;

                    using (var imageToSave = SKImage.FromBitmap(bmp))
                    using (var data = imageToSave.Encode(SKEncodedImageFormat.Png, 1000))
                    {
                        using (var stream = File.OpenWrite(path))
                        {
                            data.SaveTo(stream);
                        }
                    }

                    var alert = new NSAlert()
                    {
                        AlertStyle = NSAlertStyle.Informational,
                        InformativeText = "Текущее изображение было сохранено.",
                        MessageText = "Сохранено",
                    };
                    alert.RunModal();
                }
            });
        }


        void GetFractalInfoFromMainView()
        {
            CenterXLabel.StringValue = $"Центр X: {MainClass.mainViewController.fractalData.CenterX}";
            CenterYLabel.StringValue = $"Центр Y: {MainClass.mainViewController.fractalData.CenterY}";
            SizeAreaLabel.StringValue = $"Увеличение: {MainClass.mainViewController.fractalData.SizeArea}";
        }

        void FillPopUpButtons() 
        {
            for (var i = 16; i <= 2048; i *= 2)
            {
                WidthPopUpButton.AddItem(i.ToString());
                HeightPopUpButton.AddItem(i.ToString());
            }
        }

        void StatusRun()
        {
            StatusLabel.StringValue = "Статус: Ждите...";
            StatusLabel.TextColor = NSColor.SystemOrangeColor;
            ProgressIndicator.StartAnimation(this);
        }

        void StatusDone() 
        {
            StatusLabel.StringValue = "Статус: Готово";
            StatusLabel.TextColor = NSColor.SystemBlueColor;
            ProgressIndicator.StopAnimation(this);
        }

        async partial void StartCalculateButtonClick(NSObject sender)
        {
            width =  Convert.ToInt32(WidthPopUpButton.SelectedItem.Title);
            height = Convert.ToInt32(HeightPopUpButton.SelectedItem.Title);

            if((width > 1400 || height > 1400) && iterCount > 10000)
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Warning,
                    InformativeText = "Внимание! При текущей конфигурации выполнение может занять значительное время.",
                    MessageText = "Выполнение"
                };
                alert.RunSheetModal(View.Window);
            }

            AbstractFractal fractalData = MainClass.mainViewController.fractalData;

            GenerationSettings genSettings = new GenerationSettings
            {
                Algorithm = GenerationAlgorithms.MultiThreadCalculation,
                Width = width,
                Height = height,
                IterationCount = iterCount
            };

            ColorSettings colorSettings = MainClass.mainViewController.clrSettings;

            FractalCreator creator = new FractalCreator(fractalData, genSettings, colorSettings);

            CreateImageButton.Enabled = false;

            Stopwatch sw = new Stopwatch();

            StatusRun();
            sw.Start();
            bmp = await creator.CreateAsync();
            sw.Stop();
            StatusDone();

            var alertDone = new NSAlert()
            {
                AlertStyle = NSAlertStyle.Warning,
                InformativeText = $"Расчеты завершены за время: {sw.ElapsedMilliseconds / 1000} сек.",
                MessageText = "Выполнено"
            };
            alertDone.RunSheetModal(View.Window);

            SaveImageButton.Enabled = true;
            CreateImageButton.Enabled = true;

        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            StatusDone();
            GetFractalInfoFromMainView();

            FillPopUpButtons();

            IterCountTextField.StringValue = IterCountChangeStepper.IntValue.ToString();
            iterCount = IterCountChangeStepper.IntValue;
            IterCountChangeStepper.Activated += (sender, e) => {
                IterCountTextField.StringValue = IterCountChangeStepper.IntValue.ToString();
                iterCount = IterCountChangeStepper.IntValue;
            };

            SaveImageButton.Activated += SaveImageButton_Activated;

            SaveImageButton.Enabled = false;
        }
    }
}
