// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;
using Foundation;
using FractalViewMac.Model;
using FractalViewMac.Model.Common.Classes;
using FractalViewMac.Model.Fractals;
using SkiaSharp;
using SkiaSharp.Views.Mac;

namespace FractalView
{
    public partial class MainViewController : NSViewController
    {
        // Public fields ---------------------------------------------
        public AbstractFractal fractalData;
        public GenerationSettings genSettings;
        public ColorSettings clrSettings;
        public FractalCreator creator;
        public NSImage CurrentImage { get; private set; }
        // ------------------------------------------------------------

        // Public methods ---------------------------------------------
        public async void ReDraw()
        {
            StatusLabel.StringValue = "Статус: Ждите...";
            StatusLabel.TextColor = NSColor.SystemOrangeColor;
            StasusProgressIndicator.StartAnimation(this);

            SKBitmap bmp = await creator.ReDrawAsync();

            MainImageView.Image = bmp.ToNSImage();

            CurrentImage = MainImageView.Image;

            StatusLabel.StringValue = "Статус: Готово";
            StatusLabel.TextColor = NSColor.SystemBlueColor;
            StasusProgressIndicator.StopAnimation(this);
        }

        public async void Create()
        {
            StatusLabel.StringValue = "Статус: Ждите...";
            StatusLabel.TextColor = NSColor.SystemOrangeColor;
            StasusProgressIndicator.StartAnimation(this);

            SKBitmap bmp = await creator.CreateAsync();

            MainImageView.Image = bmp.ToNSImage();

            CurrentImage = MainImageView.Image;

            StatusLabel.StringValue = "Статус: Готово";
            StatusLabel.TextColor = NSColor.SystemBlueColor;
            StasusProgressIndicator.StopAnimation(this);
        }

        public void Reset()
        {
            fractalData.Reset();
            Create();
        }
        // ------------------------------------------------------------

        void PrepareComponents() 
        {
            MainImageView.MouseLeftClick += (sender, e) => 
            {
                fractalData.CenterX = creator.PositionXFractalCoord(e.PosX);
                fractalData.CenterY = creator.PositionYFractalCoord(e.PosY);

                fractalData.ZoomPlus();

                Create();
            };

            MainImageView.MouseRightClick += (sender, e) => 
            {
                fractalData.CenterX = creator.PositionXFractalCoord(e.PosX);
                fractalData.CenterY = creator.PositionYFractalCoord(e.PosY);

                fractalData.ZoomMinus();

                Create();
            };
        }

        public MainViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            fractalData = new FractalMandelbrot();
            genSettings = new GenerationSettings();
            clrSettings = new ColorSettings();
            creator = new FractalCreator(fractalData, genSettings, clrSettings);

            MainClass.mainViewController = this;

            PrepareComponents();

            genSettings.Width = (int)MainImageView.Frame.Size.Width;
            genSettings.Height = (int)MainImageView.Frame.Size.Height;

            Create();

        }

        public override NSObject RepresentedObject 
        { 
            get => base.RepresentedObject; 
            set => base.RepresentedObject = value; 
        }
    }
}
